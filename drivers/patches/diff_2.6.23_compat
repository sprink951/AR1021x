diff -Naur WLAN-AIO-SB_orig/drivers/compat//backport.c WLAN-AIO-SB/drivers/compat//backport.c
--- WLAN-AIO-SB_orig/drivers/compat//backport.c	1970-01-01 08:00:00.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//backport.c	2012-01-04 13:30:00.000000000 +0800
@@ -0,0 +1,531 @@
+#include <linux/module.h>
+
+MODULE_AUTHOR("Luis R. Rodriguez");
+MODULE_DESCRIPTION("Kernel compatibility module");
+MODULE_LICENSE("GPL");
+
+#include <stdarg.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/string.h>
+#include <linux/device.h>
+#include <linux/ctype.h>
+#include <linux/kallsyms.h>
+#include <linux/kobject.h>
+
+size_t (*sym_ksize)(const void *object);
+int (*sym_kobject_rename)(struct kobject *kobject, const char *new_name);
+
+size_t compat_ksize(const void *object)
+{
+	return sym_ksize(object);
+}
+EXPORT_SYMBOL(compat_ksize);
+
+int compat_kobject_rename(struct kobject *kobject, const char *new_name)
+{
+	return sym_kobject_rename(kobject,new_name);
+}
+EXPORT_SYMBOL(compat_kobject_rename);
+
+void compat_symbol_init()
+{
+
+	sym_ksize            =&ksize;//kallsyms_lookup_name("ksize");
+	//sym_kobject_rename   =&kobject_rename;//kallsyms_lookup_name("kobject_rename");
+	printk("123");
+}
+
+#if 0
+/**
+ * device_rename - renames a device
+ * @dev: the pointer to the struct device to be renamed
+ * @new_name: the new name of the device
+ */
+int device_rename(struct device *dev, char *new_name)
+{
+	char *old_class_name = NULL;
+	char *new_class_name = NULL;
+	char *old_device_name = NULL;
+	int error;
+
+	dev = get_device(dev);
+	if (!dev)
+		return -EINVAL;
+
+	pr_debug("DEVICE: renaming '%s' to '%s'\n", dev->bus_id, new_name);
+
+#ifdef CONFIG_SYSFS_DEPRECATED
+	if ((dev->class) && (dev->parent))
+		old_class_name = make_class_name(dev->class->name, &dev->kobj);
+#endif
+
+	old_device_name = kmalloc(BUS_ID_SIZE, GFP_KERNEL);
+	if (!old_device_name) {
+		error = -ENOMEM;
+		goto out;
+	}
+	strlcpy(old_device_name, dev->bus_id, BUS_ID_SIZE);
+	strlcpy(dev->bus_id, new_name, BUS_ID_SIZE);
+
+	error = kobject_rename(&dev->kobj, new_name);
+	if (error) {
+		strlcpy(dev->bus_id, old_device_name, BUS_ID_SIZE);
+		goto out;
+	}
+
+#ifdef CONFIG_SYSFS_DEPRECATED
+	if (old_class_name) {
+		new_class_name = make_class_name(dev->class->name, &dev->kobj);
+		if (new_class_name) {
+			error = sysfs_create_link(&dev->parent->kobj,
+						  &dev->kobj, new_class_name);
+			if (error)
+				goto out;
+			sysfs_remove_link(&dev->parent->kobj, old_class_name);
+		}
+	}
+#endif
+
+	if (dev->class) {
+		sysfs_remove_link(&dev->class->subsys.kset.kobj, old_device_name);
+		error = sysfs_create_link(&dev->class->subsys.kset.kobj, &dev->kobj,
+					  dev->bus_id);
+		if (error) {
+			/* Uh... how to unravel this if restoring can fail? */
+			dev_err(dev, "%s: sysfs_create_symlink failed (%d)\n",
+				__FUNCTION__, error);
+		}
+	}
+out:
+	put_device(dev);
+
+	kfree(new_class_name);
+	kfree(old_class_name);
+	kfree(old_device_name);
+
+	return error;
+}
+EXPORT_SYMBOL_GPL(device_rename);
+
+
+/* Simplified asprintf. */
+char *kvasprintf(gfp_t gfp, const char *fmt, va_list ap)
+{
+	unsigned int len;
+	char *p;
+	va_list aq;
+
+	va_copy(aq, ap);
+	len = vsnprintf(NULL, 0, fmt, aq);
+	va_end(aq);
+
+	p = kmalloc(len+1, gfp);
+	if (!p)
+		return NULL;
+
+	vsnprintf(p, len+1, fmt, ap);
+
+	return p;
+}
+EXPORT_SYMBOL(kvasprintf);
+#endif
+
+/**
+ * kobject_set_name_vargs - Set the name of an kobject
+ * @kobj: struct kobject to set the name of
+ * @fmt: format string used to build the name
+ * @vargs: vargs to format the string.
+ */
+int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
+				  va_list vargs)
+{
+	//const char *old_name = kobj->name;
+	char *s;
+	char *np;
+
+	if (kobj->name && !fmt)
+		return 0;
+
+	np = kvasprintf(GFP_KERNEL, fmt, vargs);
+	if (!np)
+		return -ENOMEM;
+	strcpy( kobj->name, np );	
+
+	/* ewww... some of these buggers have '/' in the name ... */
+	while ((s = strchr(kobj->name, '/')))
+		s[0] = '!';
+
+	kfree(np);
+	return 0;
+}
+
+#if 0
+/**
+ * __round_jiffies - function to round jiffies to a full second
+ * @j: the time in (absolute) jiffies that should be rounded
+ * @cpu: the processor number on which the timeout will happen
+ *
+ * __round_jiffies() rounds an absolute time in the future (in jiffies)
+ * up or down to (approximately) full seconds. This is useful for timers
+ * for which the exact time they fire does not matter too much, as long as
+ * they fire approximately every X seconds.
+ *
+ * By rounding these timers to whole seconds, all such timers will fire
+ * at the same time, rather than at various times spread out. The goal
+ * of this is to have the CPU wake up less, which saves power.
+ *
+ * The exact rounding is skewed for each processor to avoid all
+ * processors firing at the exact same time, which could lead
+ * to lock contention or spurious cache line bouncing.
+ *
+ * The return value is the rounded version of the @j parameter.
+ */
+unsigned long __round_jiffies(unsigned long j, int cpu)
+{
+	int rem;
+	unsigned long original = j;
+
+	/*
+	 * We don't want all cpus firing their timers at once hitting the
+	 * same lock or cachelines, so we skew each extra cpu with an extra
+	 * 3 jiffies. This 3 jiffies came originally from the mm/ code which
+	 * already did this.
+	 * The skew is done by adding 3*cpunr, then round, then subtract this
+	 * extra offset again.
+	 */
+	j += cpu * 3;
+
+	rem = j % HZ;
+
+	/*
+	 * If the target jiffie is just after a whole second (which can happen
+	 * due to delays of the timer irq, long irq off times etc etc) then
+	 * we should round down to the whole second, not up. Use 1/4th second
+	 * as cutoff for this rounding as an extreme upper bound for this.
+	 */
+	if (rem < HZ/4) /* round down */
+		j = j - rem;
+	else /* round up */
+		j = j - rem + HZ;
+
+	/* now that we have rounded, subtract the extra skew again */
+	j -= cpu * 3;
+
+	if (j <= jiffies) /* rounding ate our timeout entirely; */
+		return original;
+	return j;
+}
+EXPORT_SYMBOL_GPL(__round_jiffies);
+
+/**
+ * __round_jiffies_relative - function to round jiffies to a full second
+ * @j: the time in (relative) jiffies that should be rounded
+ * @cpu: the processor number on which the timeout will happen
+ *
+ * __round_jiffies_relative() rounds a time delta  in the future (in jiffies)
+ * up or down to (approximately) full seconds. This is useful for timers
+ * for which the exact time they fire does not matter too much, as long as
+ * they fire approximately every X seconds.
+ *
+ * By rounding these timers to whole seconds, all such timers will fire
+ * at the same time, rather than at various times spread out. The goal
+ * of this is to have the CPU wake up less, which saves power.
+ *
+ * The exact rounding is skewed for each processor to avoid all
+ * processors firing at the exact same time, which could lead
+ * to lock contention or spurious cache line bouncing.
+ *
+ * The return value is the rounded version of the @j parameter.
+ */
+unsigned long __round_jiffies_relative(unsigned long j, int cpu)
+{
+	/*
+	 * In theory the following code can skip a jiffy in case jiffies
+	 * increments right between the addition and the later subtraction.
+	 * However since the entire point of this function is to use approximate
+	 * timeouts, it's entirely ok to not handle that.
+	 */
+	return  __round_jiffies(j + jiffies, cpu) - jiffies;
+}
+EXPORT_SYMBOL_GPL(__round_jiffies_relative);
+
+unsigned long round_jiffies_relative(unsigned long j)
+{
+	return __round_jiffies_relative(j, raw_smp_processor_id());
+}
+EXPORT_SYMBOL_GPL(round_jiffies_relative);
+
+/**
+ * device_create_bin_file - create sysfs binary attribute file for device.
+ * @dev: device.
+ * @attr: device binary attribute descriptor.
+ */
+int device_create_bin_file(struct device *dev, struct bin_attribute *attr)
+{
+	int error = -EINVAL;
+	if (dev)
+		error = sysfs_create_bin_file(&dev->kobj, attr);
+	return error;
+}
+EXPORT_SYMBOL_GPL(device_create_bin_file);
+
+/**
+ * device_remove_bin_file - remove sysfs binary attribute file
+ * @dev: device.
+ * @attr: device binary attribute descriptor.
+ */
+void device_remove_bin_file(struct device *dev, struct bin_attribute *attr)
+{
+	if (dev)
+		sysfs_remove_bin_file(&dev->kobj, attr);
+}
+EXPORT_SYMBOL_GPL(device_remove_bin_file);
+
+/**
+ * krealloc - reallocate memory. The contents will remain unchanged.
+ * @p: object to reallocate memory for.
+ * @new_size: how many bytes of memory are required.
+ * @flags: the type of memory to allocate.
+ *
+ * The contents of the object pointed to are preserved up to the
+ * lesser of the new and old sizes.  If @p is %NULL, krealloc()
+ * behaves exactly like kmalloc().  If @size is 0 and @p is not a
+ * %NULL pointer, the object pointed to is freed.
+ */
+void *krealloc(const void *p, size_t new_size, gfp_t flags)
+{
+	void *ret;
+	size_t ks;
+
+	if (unlikely(!new_size)) {
+		kfree(p);
+		return ZERO_SIZE_PTR;
+	}
+
+	ks = ksize(p);
+	if (ks >= new_size)
+		return (void *)p;
+
+	ret = kmalloc_track_caller(new_size, flags);
+	if (ret) {
+		memcpy(ret, p, min(new_size, ks));
+		kfree(p);
+	}
+	return ret;
+}
+EXPORT_SYMBOL(krealloc);
+
+/**
+ * hex_dump_to_buffer - convert a blob of data to "hex ASCII" in memory
+ * @buf: data blob to dump
+ * @len: number of bytes in the @buf
+ * @rowsize: number of bytes to print per line; must be 16 or 32
+ * @groupsize: number of bytes to print at a time (1, 2, 4, 8; default = 1)
+ * @linebuf: where to put the converted data
+ * @linebuflen: total size of @linebuf, including space for terminating NUL
+ * @ascii: include ASCII after the hex output
+ *
+ * hex_dump_to_buffer() works on one "line" of output at a time, i.e.,
+ * 16 or 32 bytes of input data converted to hex + ASCII output.
+ *
+ * Given a buffer of u8 data, hex_dump_to_buffer() converts the input data
+ * to a hex + ASCII dump at the supplied memory location.
+ * The converted output is always NUL-terminated.
+ *
+ * E.g.:
+ *   hex_dump_to_buffer(frame->data, frame->len, 16, 1,
+ *			linebuf, sizeof(linebuf), 1);
+ *
+ * example output buffer:
+ * 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f  @ABCDEFGHIJKLMNO
+ */
+void hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
+			int groupsize, char *linebuf, size_t linebuflen,
+			bool ascii)
+{
+	const u8 *ptr = buf;
+	u8 ch;
+	int j, lx = 0;
+	int ascii_column;
+
+	if (rowsize != 16 && rowsize != 32)
+		rowsize = 16;
+
+	if (!len)
+		goto nil;
+	if (len > rowsize)		/* limit to one line at a time */
+		len = rowsize;
+	if ((len % groupsize) != 0)	/* no mixed size output */
+		groupsize = 1;
+
+	switch (groupsize) {
+	case 8: {
+		const u64 *ptr8 = buf;
+		int ngroups = len / groupsize;
+
+		for (j = 0; j < ngroups; j++)
+			lx += scnprintf(linebuf + lx, linebuflen - lx,
+				"%16.16llx ", (unsigned long long)*(ptr8 + j));
+		ascii_column = 17 * ngroups + 2;
+		break;
+	}
+
+	case 4: {
+		const u32 *ptr4 = buf;
+		int ngroups = len / groupsize;
+
+		for (j = 0; j < ngroups; j++)
+			lx += scnprintf(linebuf + lx, linebuflen - lx,
+				"%8.8x ", *(ptr4 + j));
+		ascii_column = 9 * ngroups + 2;
+		break;
+	}
+
+	case 2: {
+		const u16 *ptr2 = buf;
+		int ngroups = len / groupsize;
+
+		for (j = 0; j < ngroups; j++)
+			lx += scnprintf(linebuf + lx, linebuflen - lx,
+				"%4.4x ", *(ptr2 + j));
+		ascii_column = 5 * ngroups + 2;
+		break;
+	}
+
+	default:
+		for (j = 0; (j < rowsize) && (j < len) && (lx + 4) < linebuflen;
+		     j++) {
+			ch = ptr[j];
+			linebuf[lx++] = hex_asc(ch >> 4);
+			linebuf[lx++] = hex_asc(ch & 0x0f);
+			linebuf[lx++] = ' ';
+		}
+		ascii_column = 3 * rowsize + 2;
+		break;
+	}
+	if (!ascii)
+		goto nil;
+
+	while (lx < (linebuflen - 1) && lx < (ascii_column - 1))
+		linebuf[lx++] = ' ';
+	for (j = 0; (j < rowsize) && (j < len) && (lx + 2) < linebuflen; j++)
+		linebuf[lx++] = isprint(ptr[j]) ? ptr[j] : '.';
+nil:
+	linebuf[lx++] = '\0';
+}
+EXPORT_SYMBOL(hex_dump_to_buffer);
+
+/**
+ * print_hex_dump - print a text hex dump to syslog for a binary blob of data
+ * @level: kernel log level (e.g. KERN_DEBUG)
+ * @prefix_str: string to prefix each line with;
+ *  caller supplies trailing spaces for alignment if desired
+ * @prefix_type: controls whether prefix of an offset, address, or none
+ *  is printed (%DUMP_PREFIX_OFFSET, %DUMP_PREFIX_ADDRESS, %DUMP_PREFIX_NONE)
+ * @rowsize: number of bytes to print per line; must be 16 or 32
+ * @groupsize: number of bytes to print at a time (1, 2, 4, 8; default = 1)
+ * @buf: data blob to dump
+ * @len: number of bytes in the @buf
+ * @ascii: include ASCII after the hex output
+ *
+ * Given a buffer of u8 data, print_hex_dump() prints a hex + ASCII dump
+ * to the kernel log at the specified kernel log level, with an optional
+ * leading prefix.
+ *
+ * print_hex_dump() works on one "line" of output at a time, i.e.,
+ * 16 or 32 bytes of input data converted to hex + ASCII output.
+ * print_hex_dump() iterates over the entire input @buf, breaking it into
+ * "line size" chunks to format and print.
+ *
+ * E.g.:
+ *   print_hex_dump(KERN_DEBUG, "raw data: ", DUMP_PREFIX_ADDRESS,
+ *		16, 1, frame->data, frame->len, 1);
+ *
+ * Example output using %DUMP_PREFIX_OFFSET and 1-byte mode:
+ * 0009ab42: 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f  @ABCDEFGHIJKLMNO
+ * Example output using %DUMP_PREFIX_ADDRESS and 4-byte mode:
+ * ffffffff88089af0: 73727170 77767574 7b7a7978 7f7e7d7c  pqrstuvwxyz{|}~.
+ */
+void print_hex_dump(const char *level, const char *prefix_str, int prefix_type,
+			int rowsize, int groupsize,
+			const void *buf, size_t len, bool ascii)
+{
+	const u8 *ptr = buf;
+	int i, linelen, remaining = len;
+	unsigned char linebuf[200];
+
+	if (rowsize != 16 && rowsize != 32)
+		rowsize = 16;
+
+	for (i = 0; i < len; i += rowsize) {
+		linelen = min(remaining, rowsize);
+		remaining -= rowsize;
+		hex_dump_to_buffer(ptr + i, linelen, rowsize, groupsize,
+				linebuf, sizeof(linebuf), ascii);
+
+		switch (prefix_type) {
+		case DUMP_PREFIX_ADDRESS:
+			printk("%s%s%*p: %s\n", level, prefix_str,
+				(int)(2 * sizeof(void *)), ptr + i, linebuf);
+			break;
+		case DUMP_PREFIX_OFFSET:
+			printk("%s%s%.8x: %s\n", level, prefix_str, i, linebuf);
+			break;
+		default:
+			printk("%s%s%s\n", level, prefix_str, linebuf);
+			break;
+		}
+	}
+}
+EXPORT_SYMBOL(print_hex_dump);
+
+/**
+ * print_hex_dump_bytes - shorthand form of print_hex_dump() with default params
+ * @prefix_str: string to prefix each line with;
+ *  caller supplies trailing spaces for alignment if desired
+ * @prefix_type: controls whether prefix of an offset, address, or none
+ *  is printed (%DUMP_PREFIX_OFFSET, %DUMP_PREFIX_ADDRESS, %DUMP_PREFIX_NONE)
+ * @buf: data blob to dump
+ * @len: number of bytes in the @buf
+ *
+ * Calls print_hex_dump(), with log level of KERN_DEBUG,
+ * rowsize of 16, groupsize of 1, and ASCII output included.
+ */
+void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
+			const void *buf, size_t len)
+{
+	print_hex_dump(KERN_DEBUG, prefix_str, prefix_type, 16, 1,
+			buf, len, 1);
+}
+EXPORT_SYMBOL(print_hex_dump_bytes);
+
+#ifndef __HAVE_ARCH_STRCASECMP
+int strcasecmp(const char *s1, const char *s2)
+{
+	int c1, c2;
+
+	do {
+		c1 = tolower(*s1++);
+		c2 = tolower(*s2++);
+	} while (c1 == c2 && c1 != 0);
+	return c1 - c2;
+}
+EXPORT_SYMBOL(strcasecmp);
+#endif
+#endif
+
+/*
+static int __init backport_init(void)
+{
+        return 0;
+}
+module_init(backport_init);
+
+static void __exit backport_exit(void)
+{
+        return;
+}
+module_exit(backport_exit);
+*/
diff -Naur WLAN-AIO-SB_orig/drivers/compat//compat-2.6.26.c WLAN-AIO-SB/drivers/compat//compat-2.6.26.c
--- WLAN-AIO-SB_orig/drivers/compat//compat-2.6.26.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//compat-2.6.26.c	2013-01-04 15:00:01.000000000 +0800
@@ -84,5 +84,5 @@
 	va_end(vargs);
 	return err;
 }
-EXPORT_SYMBOL_GPL(dev_set_name);
+EXPORT_SYMBOL(dev_set_name);
 #endif
diff -Naur WLAN-AIO-SB_orig/drivers/compat//compat-2.6.28.c WLAN-AIO-SB/drivers/compat//compat-2.6.28.c
--- WLAN-AIO-SB_orig/drivers/compat//compat-2.6.28.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//compat-2.6.28.c	2013-01-04 15:00:02.000000000 +0800
@@ -407,8 +407,10 @@
 			return -EINVAL;
 		}
 		return 0;
+#if 0
 	case TCFLSH:
 		return tty_perform_flush(tty, arg);
+#endif
 	case TIOCPKT:
 	{
 		int pktmode;
@@ -434,8 +436,12 @@
 		return 0;
 	}
 	default:
+#if 0
 		/* Try the mode commands */
 		return tty_mode_ioctl(tty, file, cmd, arg);
+#else
+		return 0;
+#endif
 	}
 }
 EXPORT_SYMBOL(n_tty_ioctl_helper);
diff -Naur WLAN-AIO-SB_orig/drivers/compat//compat-2.6.29.c WLAN-AIO-SB/drivers/compat//compat-2.6.29.c
--- WLAN-AIO-SB_orig/drivers/compat//compat-2.6.29.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//compat-2.6.29.c	2013-01-04 15:00:01.000000000 +0800
@@ -26,9 +26,11 @@
 	dev->init = ops->ndo_init;
 	dev->stop = ops->ndo_stop;
 	dev->hard_start_xmit = ops->ndo_start_xmit;
+#if 0
 	dev->change_rx_flags = ops->ndo_change_rx_flags;
+#endif
 	dev->set_multicast_list = ops->ndo_set_multicast_list;
-	dev->validate_addr = ops->ndo_validate_addr;
+	//dev->validate_addr = ops->ndo_validate_addr;
 	dev->do_ioctl = ops->ndo_do_ioctl;
 	dev->set_config = ops->ndo_set_config;
 	dev->change_mtu = ops->ndo_change_mtu;
@@ -136,6 +138,7 @@
  */
 int init_dummy_netdev(struct net_device *dev)
 {
+#if 0
 	/* Clear everything. Note we don't initialize spinlocks
 	 * are they aren't supposed to be taken by any of the
 	 * NAPI code and this dummy netdev is supposed to be
@@ -159,7 +162,7 @@
 	/* a dummy interface is started by default */
 	set_bit(__LINK_STATE_PRESENT, &dev->state);
 	set_bit(__LINK_STATE_START, &dev->state);
-
+#endif
 	return 0;
 }
 EXPORT_SYMBOL_GPL(init_dummy_netdev);
diff -Naur WLAN-AIO-SB_orig/drivers/compat//compat-2.6.32.c WLAN-AIO-SB/drivers/compat//compat-2.6.32.c
--- WLAN-AIO-SB_orig/drivers/compat//compat-2.6.32.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//compat-2.6.32.c	2013-01-04 15:00:01.000000000 +0800
@@ -12,6 +12,7 @@
 #include <linux/compat.h>
 #include <linux/netdevice.h>
 
+#if 0
 int __dev_addr_add(struct dev_addr_list **list, int *count,
 		   void *addr, int alen, int glbl)
 {
@@ -117,6 +118,134 @@
 	}
 }
 EXPORT_SYMBOL_GPL(__dev_addr_unsync);
+#else
+int __dev_addr_add(struct dev_addr_list **list, int *count,
+		   void *addr, int alen, int glbl)
+{
+	struct dev_addr_list *da;
+
+	for (da = *list; da != NULL; da = da->next) {
+		if (memcmp(da->da_addr, addr, da->da_addrlen) == 0 &&
+		    da->da_addrlen == alen) {
+			if (glbl) {
+				int old_glbl = da->da_gusers;
+				da->da_gusers = 1;
+				if (old_glbl)
+					return 0;
+			}
+			da->da_users++;
+			return 0;
+		}
+	}
+
+	da = kzalloc(sizeof(*da), GFP_ATOMIC);
+	if (da == NULL)
+		return -ENOMEM;
+	memcpy(da->da_addr, addr, alen);
+	da->da_addrlen = alen;
+	da->da_users = 1;
+	da->da_gusers = glbl ? 1 : 0;
+	da->next = *list;
+	*list = da;
+	(*count)++;
+	return 0;
+}
+
+int __dev_addr_delete(struct dev_addr_list **list, int *count,
+		      void *addr, int alen, int glbl)
+{
+	struct dev_addr_list *da;
+
+	for (; (da = *list) != NULL; list = &da->next) {
+		if (memcmp(da->da_addr, addr, da->da_addrlen) == 0 &&
+		    alen == da->da_addrlen) {
+			if (glbl) {
+				int old_glbl = da->da_gusers;
+				da->da_gusers = 0;
+				if (old_glbl == 0)
+					break;
+			}
+			if (--da->da_users)
+				return 0;
+
+			*list = da->next;
+			kfree(da);
+			(*count)--;
+			return 0;
+		}
+	}
+	return -ENOENT;
+}
+
+int __dev_addr_sync(struct dev_addr_list **to, int *to_count,
+		    struct dev_addr_list **from, int *from_count)
+{
+	struct dev_addr_list *da, *next, *da_to;
+	int err = 0;
+
+	da = *from;
+	while (da != NULL) {
+		bool synced = false;
+		next = da->next;
+		da_to = *to;
+		/* RHEL5 does not have da->da_synced... */
+		while (da_to != NULL) {
+			if (memcmp(da_to->da_addr, da->da_addr,
+				da_to->da_addrlen) == 0 &&
+				da->da_addrlen == da_to->da_addrlen) {
+				synced = true;
+				break;
+			}
+			da_to = da_to->next;
+		}
+		if (!synced) {
+			err = __dev_addr_add(to, to_count,
+					     da->da_addr, da->da_addrlen, 0);
+			if (err < 0)
+				break;
+			da->da_users++;
+		} else if (da->da_users == 1) {
+			__dev_addr_delete(to, to_count,
+					  da->da_addr, da->da_addrlen, 0);
+			__dev_addr_delete(from, from_count,
+					  da->da_addr, da->da_addrlen, 0);
+		}
+		da = next;
+	}
+	return err;
+}
+EXPORT_SYMBOL_GPL(__dev_addr_sync);
+
+void __dev_addr_unsync(struct dev_addr_list **to, int *to_count,
+		       struct dev_addr_list **from, int *from_count)
+{
+	struct dev_addr_list *da, *next, *da_to;
+
+	da = *from;
+	while (da != NULL) {
+		bool synced = false;
+		next = da->next;
+		da_to = *to;
+		/* RHEL5 does not have da->da_synced... */
+		while (da_to != NULL) {
+			if (memcmp(da_to->da_addr, da->da_addr,
+				da_to->da_addrlen) == 0 &&
+				da->da_addrlen == da_to->da_addrlen) {
+				synced = true;
+				break;
+			}
+			da_to = da_to->next;
+		}
+		if (synced) {
+			__dev_addr_delete(to, to_count,
+					  da->da_addr, da->da_addrlen, 0);
+			__dev_addr_delete(from, from_count,
+					  da->da_addr, da->da_addrlen, 0);
+		}
+		da = next;
+	}
+}
+#endif
 
 /*
  * Nonzero if YEAR is a leap year (every 4 years,
diff -Naur WLAN-AIO-SB_orig/drivers/compat//compat-2.6.37.c WLAN-AIO-SB/drivers/compat//compat-2.6.37.c
--- WLAN-AIO-SB_orig/drivers/compat//compat-2.6.37.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//compat-2.6.37.c	2013-01-04 15:00:01.000000000 +0800
@@ -12,7 +12,9 @@
 #include <linux/compat.h>
 #include <linux/netdevice.h>
 #include <net/sock.h>
+#if 0
 #include <linux/nsproxy.h>
+#endif
 #include <linux/vmalloc.h>
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,35)
diff -Naur WLAN-AIO-SB_orig/drivers/compat//compat-2.6.38.c WLAN-AIO-SB/drivers/compat//compat-2.6.38.c
--- WLAN-AIO-SB_orig/drivers/compat//compat-2.6.38.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//compat-2.6.38.c	2013-01-04 15:00:01.000000000 +0800
@@ -11,7 +11,9 @@
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,38))
 #include <linux/compat.h>
 #include <linux/module.h>
+#if 0
 #include <linux/bug.h>
+#endif
 
 /**
  * ewma_init() - Initialize EWMA parameters
diff -Naur WLAN-AIO-SB_orig/drivers/compat//compat_firmware_class.c WLAN-AIO-SB/drivers/compat//compat_firmware_class.c
--- WLAN-AIO-SB_orig/drivers/compat//compat_firmware_class.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//compat_firmware_class.c	2013-01-04 15:00:01.000000000 +0800
@@ -206,8 +206,10 @@
 static struct class firmware_class = {
 	.name		= "compat_firmware",
 	.class_attrs	= firmware_class_attrs,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 	.dev_uevent	= firmware_uevent,
 	.dev_release	= fw_dev_release,
+#endif
 };
 
 static ssize_t firmware_loading_show(struct device *dev,
diff -Naur WLAN-AIO-SB_orig/drivers/compat//Kbuild WLAN-AIO-SB/drivers/compat//Kbuild
--- WLAN-AIO-SB_orig/drivers/compat//Kbuild	2012-12-24 17:44:24.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//Kbuild	2013-01-04 15:00:01.000000000 +0800
@@ -6,6 +6,7 @@
 compat-y += main.o
 
 # Compat kernel compatibility code
+compat-$(CONFIG_COMPAT_KERNEL_2_6_24) += backport.o
 compat-$(CONFIG_COMPAT_KERNEL_2_6_24) += compat-2.6.24.o
 compat-$(CONFIG_COMPAT_KERNEL_2_6_25) += \
 	compat-2.6.25.o \
diff -Naur WLAN-AIO-SB_orig/drivers/compat//kstrtox.c WLAN-AIO-SB/drivers/compat//kstrtox.c
--- WLAN-AIO-SB_orig/drivers/compat//kstrtox.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//kstrtox.c	2013-01-04 15:00:01.000000000 +0800
@@ -145,7 +145,7 @@
 }
 EXPORT_SYMBOL(_kstrtol);
 
-int kstrtouint(const char *s, unsigned int base, unsigned int *res)
+int ckstrtouint(const char *s, unsigned int base, unsigned int *res)
 {
 	unsigned long long tmp;
 	int rv;
@@ -158,7 +158,7 @@
 	*res = tmp;
 	return 0;
 }
-EXPORT_SYMBOL(kstrtouint);
+EXPORT_SYMBOL(ckstrtouint);
 
 int kstrtoint(const char *s, unsigned int base, int *res)
 {
@@ -175,7 +175,7 @@
 }
 EXPORT_SYMBOL(kstrtoint);
 
-int kstrtou16(const char *s, unsigned int base, u16 *res)
+int ckstrtou16(const char *s, unsigned int base, u16 *res)
 {
 	unsigned long long tmp;
 	int rv;
@@ -188,7 +188,7 @@
 	*res = tmp;
 	return 0;
 }
-EXPORT_SYMBOL(kstrtou16);
+EXPORT_SYMBOL(ckstrtou16);
 
 int kstrtos16(const char *s, unsigned int base, s16 *res)
 {
@@ -205,7 +205,7 @@
 }
 EXPORT_SYMBOL(kstrtos16);
 
-int kstrtou8(const char *s, unsigned int base, u8 *res)
+int ckstrtou8(const char *s, unsigned int base, u8 *res)
 {
 	unsigned long long tmp;
 	int rv;
@@ -218,9 +218,9 @@
 	*res = tmp;
 	return 0;
 }
-EXPORT_SYMBOL(kstrtou8);
+EXPORT_SYMBOL(ckstrtou8);
 
-int kstrtos8(const char *s, unsigned int base, s8 *res)
+int ckstrtos8(const char *s, unsigned int base, s8 *res)
 {
 	long long tmp;
 	int rv;
@@ -233,6 +233,6 @@
 	*res = tmp;
 	return 0;
 }
-EXPORT_SYMBOL(kstrtos8);
+EXPORT_SYMBOL(ckstrtos8);
 #endif /* #ifndef strict_strtol */
 #endif
diff -Naur WLAN-AIO-SB_orig/drivers/compat//main.c WLAN-AIO-SB/drivers/compat//main.c
--- WLAN-AIO-SB_orig/drivers/compat//main.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//main.c	2013-01-04 15:00:01.000000000 +0800
@@ -8,6 +8,7 @@
 {
 	/* pm-qos for kernels <= 2.6.24, this is a no-op on newer kernels */
 	compat_pm_qos_power_init();
+	compat_symbol_init();
 
         return 0;
 }
diff -Naur WLAN-AIO-SB_orig/drivers/compat//pm_qos_params.c WLAN-AIO-SB/drivers/compat//pm_qos_params.c
--- WLAN-AIO-SB_orig/drivers/compat//pm_qos_params.c	2012-12-24 17:34:06.000000000 +0800
+++ WLAN-AIO-SB/drivers/compat//pm_qos_params.c	2013-01-04 15:00:01.000000000 +0800
@@ -124,7 +124,7 @@
 	[PM_QOS_CPU_DMA_LATENCY] = &cpu_dma_pm_qos,
 	[PM_QOS_NETWORK_LATENCY] = &network_lat_pm_qos,
 	[PM_QOS_NETWORK_THROUGHPUT] = &network_throughput_pm_qos,
-	[PM_QOS_SYSTEM_BUS_FREQ] = &system_bus_freq_pm_qos,
+	//[PM_QOS_SYSTEM_BUS_FREQ] = &system_bus_freq_pm_qos,
 };
 
 static DEFINE_SPINLOCK(pm_qos_lock);
